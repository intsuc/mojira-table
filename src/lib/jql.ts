import type { ColumnFiltersState, SortingState } from "@tanstack/react-table"

const reservedWords = [
  "a",
  "an",
  "abort",
  "access",
  "add",
  "after",
  "alias",
  "all",
  "alter",
  "and",
  "any",
  "are",
  "as",
  "asc",
  "at",
  "audit",
  "avg",
  "be",
  "before",
  "begin",
  "between",
  "boolean",
  "break",
  "but",
  "by",
  "byte",
  "catch",
  "cf",
  "char",
  "character",
  "check",
  "checkpoint",
  "collate",
  "collation",
  "column",
  "commit",
  "connect",
  "continue",
  "count",
  "create",
  "current",
  "date",
  "decimal",
  "declare",
  "decrement",
  "default",
  "defaults",
  "define",
  "delete",
  "delimiter",
  "desc",
  "difference",
  "distinct",
  "divide",
  "do",
  "double",
  "drop",
  "else",
  "empty",
  "encoding",
  "end",
  "equals",
  "escape",
  "exclusive",
  "exec",
  "execute",
  "exists",
  "explain",
  "false",
  "fetch",
  "file",
  "field",
  "first",
  "float",
  "for",
  "from",
  "function",
  "go",
  "goto",
  "grant",
  "greater",
  "group",
  "having",
  "identified",
  "if",
  "immediate",
  "in",
  "increment",
  "index",
  "initial",
  "inner",
  "inout",
  "input",
  "insert",
  "int",
  "integer",
  "intersect",
  "intersection",
  "into",
  "is",
  "isempty",
  "isnull",
  "it",
  "join",
  "last",
  "left",
  "less",
  "like",
  "limit",
  "lock",
  "long",
  "max",
  "min",
  "minus",
  "mode",
  "modify",
  "modulo",
  "more",
  "multiply",
  "next",
  "no",
  "noaudit",
  "not",
  "notin",
  "nowait",
  "null",
  "number",
  "object",
  "of",
  "on",
  "option",
  "or",
  "order",
  "outer",
  "output",
  "power",
  "previous",
  "prior",
  "privileges",
  "public",
  "raise",
  "raw",
  "remainder",
  "rename",
  "resource",
  "return",
  "returns",
  "revoke",
  "right",
  "row",
  "rowid",
  "rownum",
  "rows",
  "select",
  "session",
  "set",
  "share",
  "size",
  "sqrt",
  "start",
  "strict",
  "string",
  "subtract",
  "such",
  "sum",
  "synonym",
  "table",
  "that",
  "the",
  "their",
  "then",
  "there",
  "these",
  "they",
  "this",
  "to",
  "trans",
  "transaction",
  "trigger",
  "true",
  "uid",
  "union",
  "unique",
  "update",
  "user",
  "validate",
  "values",
  "view",
  "was",
  "when",
  "whenever",
  "where",
  "while",
  "will",
  "with",
]

const validWord = /^[^ +.,*/%^$#@[\]]+$/

function isValidWord(word: string): boolean {
  if (reservedWords.includes(word.toLowerCase())) {
    return false
  }

  // TODO: Add more validation rules

  return validWord.test(word)
}

export function buildQuery(
  search: string,
  sorting: SortingState,
  columnFilters: ColumnFiltersState,
): string {
  const advanced = !isValidWord(search)

  if (advanced) {
    return search
  } else {
    return `text ~ ${search}`
  }
}
